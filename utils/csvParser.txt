const fs = require("fs");
const { parse } = require("csv-parse");

async function csvToArr(fileContent) {
  const list = [];

  try {
    await new Promise((resolve, reject) => {
      const readStream = fs
        .createReadStream(fileContent)
        .pipe(parse({ from_line: 1 }))
        .on("data", function (data) {
          console.log("TheRowData : " + data);
          list.push(data);
        })
        .on("end", function () {
          console.log("Read finished");
          resolve();
        })
        .on("error", function (error) {
          console.error("Error reading CSV:", error);
          reject(error);
        });
    });

    return list;
  } catch (error) {
    console.error("Error in csvToArr:", error);
    throw error;
  }
}

module.exports = {
  csvToArr,
};

// const CsvReader = require("promised-csv");
// const { Readable } = require("stream");

// // Parse CSV content into an array of talks
// function parseCSV(fileContent) {
//   return new Promise((resolve, reject) => {
//     const stream = new Readable();
//     stream._read = () => {}; // Implement the _read method to satisfy Node.js stream requirements
//     stream.push(fileContent);
//     stream.push(null);

//     const reader = new CsvReader();

//     const talks = [];
//     reader.on("row", (data) => {
//       const talk = Object.values(data)[0]; // Assuming the input is in the first (and only) column
//       talks.push(talk.trim()); // Trim to remove leading/trailing whitespaces
//     });

//     reader.on("done", () => {
//       resolve(talks);
//     });

//     reader.on("error", (err) => {
//       reject(err);
//     });

//     stream.pipe(reader);
//   });
// }

// module.exports = {
//   parseCSV,
// };
